stages:
  - prepare
  - build
  - test
  - package

variables:
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: "/certs"
  CARGO_HOME: "$CI_PROJECT_DIR/.cargo/"
  BASE: "remotes/origin/$CI_COMMIT_BRANCH~1"
  VERSION: "$CI_COMMIT_BRANCH"
  GIT_DEPTH: 0

workflow:
  rules:
    # Do not run a not stable "branch" pipeline
    - if: $CI_COMMIT_BRANCH =~ /.*\/.*/
      when: never
    # Do not run a "branch" pipeline is triggered by a MR opening
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # If a MR is opened, run a "MR" pipeline
    - if: $CI_OPEN_MERGE_REQUESTS && $CI_MERGE_REQUEST_IID
      variables:
        BASE: "remotes/origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
        VERSION: "MR-$CI_MERGE_REQUEST_IID"
    # Else, run a "branch" pipeline
    - when: always

#############
# ANCHORS
#############

.untagged: &untagged
  rules:
    - if: $CI_COMMIT_TAG == null

.release: &release
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - export APP=$(echo $CI_COMMIT_TAG | cut -d'@' -f1)
    - export VERSION=$(echo $CI_COMMIT_TAG | cut -d'@' -f2)

.cache_policy: &cache_policy
  cache:
    key: "app_center"
    paths:
      - .pnpm-store
      - node_modules
      - node_modules/.cache
      - .cargo
      - dist/**/*/target/
    policy: pull-push
    when:
      always

      #.docker-package: &docker-package
      #  image: docker:20.10.16
      #  stage: package
      #  retry:
      #    max: 2
      #    when:
      #      - always
      #  services:
      #    - name: docker:20.10.16-dind
      #      alias: docker
      #  before_script:
      #    - apk update
      #    - apk add --update git nodejs npm
      #    - npm install -g yarn
      #    - echo $CI_REGISTRY_PASSWORD | docker login --username $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

#############
# DEFAULT
#############
default:
  image: registry.gitlab.com/sonny.miel/app-center:latest
  interruptible: true
  <<: *cache_policy
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

#############
# JOBS
#############

###########################
# INSTALL STAGE
###########################

install:
  <<: [*untagged, *cache_policy]
  stage: prepare
  script:
    - pnpm config set store-dir .pnpm-store
    - pnpm install --frozen-lockfile

###########################
# BUILD STAGE
###########################

build:
  <<: [*untagged, *cache_policy]
  stage: build
  script:
    - ls
    - pnpm nx affected:build --production --optimization --base=$BASE
  artifacts:
    expire_in: 1 day
    paths:
      - "dist/*"

build:release:
  <<: [*release, *cache_policy]
  stage: build
  script:
    - pnpm nx build $APP --production --optimization
  artifacts:
    expire_in: 1 day
    paths:
      - "dist/*"

###########################
# TEST STAGE
###########################

lint:
  <<: [*untagged, *cache_policy]
  stage: test
  script:
    - pnpm nx affected:lint --base=$BASE

test:
  <<: [*untagged, *cache_policy]
  stage: test
  script:
    - pnpm nx affected:test --base=$BASE

###########################
# PACKAGE STAGE
###########################

package:
  <<: [*untagged]
  stage: package
  dependencies:
    - build
  script:
    - pnpm nx affected:package --base=$BASE --build=false --push --tag=$VERSION

package:release:
  <<: *release
  stage: package
  dependencies:
    - build:release
  script:
    - pnpm nx run $APP:package --build=false --push --tag=$VERSION
